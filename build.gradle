buildscript {
    //region Dependency declarations
    ext.versions = [
        kotlin: '1.4.0',
    ]

    ext.deps = [
        androidXTest: 'androidx.test:core-ktx:1.3.0',
        androidXTestRunner: 'androidx.test:runner:1.3.0',
        coroutines: 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9',
        coroutinesTest: 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9',
        junit: 'junit:junit:4.13',
        kotlinStdLib: "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin",
        mockito: 'org.mockito:mockito-inline:2.28.2',
        mockitoKotlin: 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0',
    ]
    //endregion

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.18"

        classpath 'org.jetbrains.kotlinx:binary-compatibility-validator:0.2.3'

        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        jcenter()
    }
}

apply plugin: 'binary-compatibility-validator'
apiValidation {
    ignoredProjects += ['app', 'test']
}

allprojects { project ->
    repositories {
        google()
        mavenCentral()
        jcenter()
    }

    //noinspection UnnecessaryQualifiedReference
    project.plugins.withType(com.android.build.gradle.LibraryPlugin) {
        project.android.libraryVariants.all { variant ->
            // TODO WORKAROUND: replace with https://issuetracker.google.com/issues/72050365 once released.
            variant.generateBuildConfigProvider.get().enabled = false
        }
    }
}

ext {
    libraryVersion = '0.5.0-SNAPSHOT'

    targetSdk = 28
    minSdk = 14

    keystore = project.hasProperty('personalKeystore') ? personalKeystore : 'x'
    keystorePassword = project.hasProperty('personalKeystorePassword') ? personalKeystorePassword : 'x'
    keyAlias = project.hasProperty('personalKeyAlias') ? personalKeyAlias : 'x'
    keyPassword = project.hasProperty('personalKeyPassword') ? personalKeyPassword : 'x'
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
